name: Build Docker images
on:
  push:
    branches: [main]
  schedule:
    - cron: '42 7 * * *' # run at 7:42 UTC (morning) every day

env:
  RUST_IMAGE_TAG: latest
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKER_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/cargo-chef

jobs:
  rust_image_tag_matrix:
    name: Generate Rust Docker image tag matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      -
        id: set-matrix
        run: |
          echo -n '::set-output name=matrix::[' \
          && curl --silent https://raw.githubusercontent.com/docker-library/official-images/master/library/rust \
            | grep -E Tags: \
            | cut -d ' ' -f 2- \
            | sed 's/, /\n/g' \
            | sed 's/\(.*\)/"\1",/g' \
            | tr '\n' ' ' \
            | sed '$ s/..$//' \
          && echo ']'
  build_and_push:
    name: Build and push
    needs: [rust_image_tag_matrix]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust_image_tag: ${{fromJSON(needs.rust_image_tag_matrix.outputs.matrix)}}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        # Get package version from git tags
        name: Get package version
        id: package_version
        run: |-
          git fetch --tags
          VER=$(git tag --sort="-v:refname" | head -n 1 | cut -d"v" -f2)
          echo ::set-output name=result::$VER
      -
        # Check if version matches ^\d+\.\d+\.\d+$
        name: Determine if release version
        id: is_release_version
        run: |
          if [[ ${{ steps.package_version.outputs.result }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=result::true
          fi
      -
        name: Build and push
        id: build_and_push
        if: ${{ steps.is_release_version.outputs.result == 'true' }}
        run: |
          RUST_IMAGE_TAG=${{ matrix.rust_image_tag }}
          CHEF_PACKAGE_VERSION=${{ steps.package_version.outputs.result }}
          CHEF_IMAGE_TAG=$CHEF_PACKAGE_VERSION-rust-$RUST_IMAGE_TAG
          CHEF_IMAGE=$DOCKER_REPO:$CHEF_IMAGE_TAG

          if DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $CHEF_IMAGE >/dev/null; then
            echo "There is already a pushed image with ${CHEF_IMAGE_TAG} as tag. Skipping."
            echo ::set-output name=duplicated::true
          else
            docker buildx build -t $CHEF_IMAGE \
              --build-arg=BASE_IMAGE=rust:$RUST_IMAGE_TAG \
              --build-arg=CHEF_TAG=$CHEF_PACKAGE_VERSION \
              --platform linux/amd64,linux/arm64 \
              --output type=docker \
              ./docker
            docker push $CHEF_IMAGE
            echo ::set-output name=duplicated::false
          fi

      -
        # Latest cargo-chef version for each Rust version
        name: Push `latest-rust-X` tag
        if: ${{ steps.is_release_version.outputs.result == 'true' && steps.build_and_push.outputs.duplicated == 'false' }}
        run: |
          RUST_IMAGE_TAG=${{ matrix.rust_image_tag }}
          CHEF_PACKAGE_VERSION=${{ steps.package_version.outputs.result }}
          CHEF_IMAGE=$DOCKER_REPO:$CHEF_PACKAGE_VERSION-rust-$RUST_IMAGE_TAG
          CHEF_IMAGE_LATEST=$DOCKER_REPO:latest-rust-$RUST_IMAGE_TAG

          docker tag $CHEF_IMAGE $CHEF_IMAGE_LATEST
          docker push $CHEF_IMAGE_LATEST
      -
        # Latest Rust version, latest cargo-chef version
        name: Push `latest` tag
        if: ${{ matrix.rust_image_tag == 'latest' && steps.is_release_version.outputs.result == 'true' && steps.build_and_push.outputs.duplicated == 'false' }}
        run: |
          docker tag $DOCKER_REPO:latest-rust-latest $DOCKER_REPO:latest
          docker push $DOCKER_REPO:latest
